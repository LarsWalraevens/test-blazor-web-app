@page "/test"
@inherits LayoutComponentBase
@using CustomDashboard.Components
@using Microsoft.AspNetCore.Components
@using Widget.Forecast
@using System.Collections.ObjectModel
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime
@inject WidgetDataService DataService
@rendermode InteractiveServer

<PageTitle>All widgets tests with real data</PageTitle>

<style>
    section {
        margin-top: 2rem;
        margin-bottom: 2rem;
        padding-top: 2rem;
        padding-bottom: 2rem;
        border-bottom: 1px solid rgba(1, 1, 1, 0.2);
    }
</style>

<h1>Widgets with backend data</h1>

<section>
    <h2>Planned & actual forecast widget</h2>
    <div class="d-grid align-items-start flex-wrap" style="gap: 5px; grid-template-columns: 1fr 1fr 1fr;">
        <div>
            @if (ForecastInstance != null)
            {
                <WidgetForecastComponent Instance="@ForecastInstance" />
            }
        </div>

    </div>
</section>



<section>
    <h2>Map</h2>
    <div id="map" style="width:300px; height:300px;">loading...</div>
</section>

<section>
    <h2>Gauges</h2>
    @if (telementryData != null)
    {
        <pre>@JsonConvert.SerializeObject(telementryData, Formatting.Indented)</pre>
    }
</section>


@code {
    private WidgetForecastInstance ForecastInstance;
    private dynamic vesselRoute = null;
    private dynamic forecastData = null;
    private dynamic telementryData = null;


    private IJSObjectReference? module;
    private string? result;

    public class LatLngItem
    {
        public double Lat { get; set; }
        public double Lng { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {

        forecastData = await DataService.GetForecastData(Guid.Parse("A1A6D02B-9B38-4E8D-9BD1-0CFFE327F2B0"), new DateTime(2024,
        3, 6, 0, 0, 0, DateTimeKind.Utc));
        telementryData = await DataService.GetVesselTelemetryData(Guid.Parse("A1A6D02B-9B38-4E8D-9BD1-0CFFE327F2B0"), new
        DateTime(2024, 3, 6, 0, 0, 0, DateTimeKind.Utc));

        ForecastInstance = await DataService.GetForecastInstanceFromForecastData(forecastData.data);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            vesselRoute = await DataService.GetVesselRouteData(Guid.Parse("A1A6D02B-9B38-4E8D-9BD1-0CFFE327F2B0"));


            // MAP
            List<LatLngItem> LatLngItems = new List<LatLngItem>();

            if (firstRender)
            {
                module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./leafletmap.js");
                await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./leaflet.rotatedMarker.js");
            }

            foreach (var item in vesselRoute)
            {
                if (item.latitude != null && item.longitude != null)
                {
                    LatLngItems.Add(new LatLngItem
                        {
                            Lat = item.latitude,
                            Lng = item.longitude
                        });
                }
            }

            await Task.Delay(100); // wait for foreach to complete

            if (module != null)
            {
                result = await module.InvokeAsync<string>("load_map", LatLngItems);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching: {ex.Message}");
        }
    }
}
