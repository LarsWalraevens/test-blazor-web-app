@page "/dashboard-grid"
@rendermode InteractiveServer
@using CustomDashboard.Components
@using Microsoft.AspNetCore.Components
@using System.Collections.ObjectModel
@using Newtonsoft.Json

<PageTitle>Custom dashboard</PageTitle>

<h1 class="mb-4">Custom dashboard <span class="btn btn-primary"
        @onclick="e => Instance.IsEditing = !Instance.IsEditing">
        <i class="bi bi-pencil mr-2" />
        @if (Instance != null && Instance.IsEditing)
        {
            @:Stop editing
        }
        else
        {
            @:Edit
        }
    </span></h1>
<div style="display: grid; gap: 5px !important; grid-template-columns: repeat(5, 1fr);">
    @foreach (IEnumerable<CustomDashboardItem> group in GroupItemsByY(Instance.Items.OrderBy(i => i.Position.Y)))
    {
        @foreach (CustomDashboardItem item in group.OrderBy(i => i.Position.X))
        {
            <div
                style="grid-row: span @(item?.Size.Y ?? 1); grid-column: span @(item?.Size.X ?? 1); min-width: 300px; max-height: 150px; position: relative;">

                @* <div style="grid-row: @(item?.Size != null ? $"{item.Position.Y + 1} / span {item.Size.Y +1}" : "auto");
        grid-column:
        @(item?.Size != null ? $"{item.Position.X + 1} / span {item.Size.X +1}" : "auto"); min-width: 300px; max-height:
        150px; position: relative;"> *@
                <div class="card" style="width: 100%; height: 100%;">
                    <div class="card-body">
                        <h5 class="card-title no-select">@item.Name</h5>

                        @if (Instance != null && Instance.IsEditing)
                        {
                            <span class="badge @(SelectedIndex == Instance.Items.IndexOf(item) ? "bg-primary" : "bg-secondary")"
                                style="position: absolute; top: 0; right: 0;">
                                @if (SelectedIndex == Instance.Items.IndexOf(item))
                                {
                                    <i title="Switch positions" class="bi bi-arrow-left-right" @onclick="ResetSelectedIndex"
                                        style="cursor:pointer;"> Selected</i>
                                }
                                else
                                {
                                    <i title="Switch positions" class="bi bi-arrow-left-right" style="cursor:pointer;"
                                        @onclick="@(() => ClickItem(item))">
                                        @if (SelectedIndex.HasValue && SelectedIndex != Instance.Items.IndexOf(item))
                                        {
                                            @: Switch Positions with
                                        }
                                    </i>
                                }
                            </span>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>
@if (Instance != null && Instance.IsEditing)
{
    <div class="row">
        <div class="col">
            <AddWidgetToCustomDashboard Instance="@Instance" />
        </div>
    </div>
}

@if (Instance != null && Instance.Items != null)
{
    <pre style="max-width: 80vw; margin: 5rem 0">@JsonConvert.SerializeObject(Instance, Formatting.Indented)</pre>
}


@code {
    public CustomDashboardInstance Instance { get; set; } = new CustomDashboardInstance()
        {
            Items = new ObservableCollection<CustomDashboardItem>() {
new CustomDashboardItem() { Position = (0, 0), SortIndex = 1, Name= "Widget 1", Size= (2, 2) },
new CustomDashboardItem() { Position = (1, 0), SortIndex = 2, Name= "Widget 2" },
new CustomDashboardItem() { Position = (0, 1), SortIndex = 3, Name= "Widget 3", Size= (1, 2) },
new CustomDashboardItem() { Position = (1, 1), SortIndex = 4, Name= "Widget 4" },
new CustomDashboardItem() { Position = (0, 2), SortIndex = 5, Name= "Widget 5" },
new CustomDashboardItem() { Position = (1, 2), SortIndex = 6, Name= "Widget 6" },
},
        };
    protected override void OnInitialized()
    {
        try
        {
            // Ensure UI updates when Items collection changes
            Instance.Items.CollectionChanged += (sender, e) => InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Method to group items by Position.Y
    private IEnumerable<IEnumerable<CustomDashboardItem>> GroupItemsByY(IEnumerable<CustomDashboardItem> items)
    {
        var groups = new List<List<CustomDashboardItem>>();
        var currentGroup = new List<CustomDashboardItem>();
        int? lastY = null;

        foreach (var item in items)
        {
            if (!lastY.HasValue || item.Position.Y != lastY)
            {
                if (currentGroup.Count > 0)
                {
                    groups.Add(currentGroup);
                    currentGroup = new List<CustomDashboardItem>();
                }
                lastY = item.Position.Y;
            }
            currentGroup.Add(item);
        }

        if (currentGroup.Count > 0)
        {
            groups.Add(currentGroup);
        }

        return groups;
    }

    private void SwapItems(int index1, int index2)
    {
        CustomDashboardItem item1 = Instance.Items[index1];
        CustomDashboardItem item2 = Instance.Items[index2];

        (int X, int Y) tempPosition = item1.Position;
        int tempSortIndex = item1.SortIndex;
        item1.Position = item2.Position;
        item2.Position = tempPosition;
        item1.SortIndex = item2.SortIndex;
        item2.SortIndex = tempSortIndex;
    }
    private int? SelectedIndex { get; set; }

    private void ResetSelectedIndex() => SelectedIndex = null;

    private void ClickItem(CustomDashboardItem item)
    {
        if (SelectedIndex.HasValue)
        {
            SwapItems(SelectedIndex.Value, Instance.Items.IndexOf(item));
            SelectedIndex = null;
            StateHasChanged();
        }
        else
        {
            SelectedIndex = Instance.Items.IndexOf(item);
        }
    }
}
