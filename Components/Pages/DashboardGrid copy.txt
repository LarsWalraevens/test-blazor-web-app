@page "/dashboard-grid"
@using CustomDashboard.Components
@using Microsoft.AspNetCore.Components
@using System.Collections.ObjectModel
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime

<PageTitle>Custom dashboard</PageTitle>

<h1 class="mb-4">Custom dashboard 
    <span class="btn btn-primary" @onclick="ToggleEditing">
        <i class="bi bi-pencil mr-2" />
        @(!Instance.IsEditing ? "Edit" : "Stop editing")
    </span>
</h1>

@if (Instance != null && Instance.Items != null)
{
    <div id="gridContainer">
        @foreach (var item in Instance.Items)
        {
            <div class="grid-item" style="grid-area: @GetGridAreaName(item.Name); min-width: 300px; min-height: 150px; position: relative; background-color: white;">
                <div class="card" style="width: 100%; height: 100%;">
                    <div class="card-body">
                        <h5 class="card-title no-select">@item.Name</h5>
                        @if (Instance.IsEditing)
                        {
                            <span class="badge @(SelectedIndex == Instance.Items.IndexOf(item) ? "bg-primary" : "bg-secondary")"
                                style="position: absolute; top: 0; right: 0;">
                                @if (SelectedIndex == Instance.Items.IndexOf(item))
                                {
                                    <i title="Switch positions" class="bi bi-arrow-left-right" @onclick="ResetSelectedIndex"
                                        style="cursor:pointer;"> Selected</i>
                                }
                                else
                                {
                                    <i title="Switch positions" class="bi bi-arrow-left-right" style="cursor:pointer;"
                                        @onclick="@(() => ClickItem(item))">
                                        @if (SelectedIndex.HasValue && SelectedIndex != Instance.Items.IndexOf(item))
                                        {
                                            @: Switch Positions with
                                        }
                                    </i>
                                }
                            </span>
                        }
                    </div>
                </div>
            </div>
        }

        @for (int y = 0; y < Instance.MaxY; y++)
        {
            @for (int x = 0; x < Instance.MaxX; x++)
            {
                var isEmptyCell = Instance.Items.All(item => item.Position.X != x || item.Position.Y != y);
                if (isEmptyCell)
                {
                    <div class="grid-item" style="grid-area: .; background-color: lightgray; min-width: 300px; min-height: 150px; position: relative;"></div>
                }
            }
        }
    </div>

    @if (Instance.IsEditing)
    {
        <div class="row">
            <div class="col">
                <AddWidgetToCustomDashboard Instance="@Instance" />
            </div>
        </div>
    }

    <pre style="max-width: 80vw; margin: 5rem 0">@JsonConvert.SerializeObject(Instance, Formatting.Indented)</pre>
}

@code {
    public CustomDashboardInstance Instance { get; set; } = new CustomDashboardInstance()
    {
        Items = new ObservableCollection<CustomDashboardItem>() {
            new CustomDashboardItem() { Position = (0, 0), SortIndex = 1, Name= "Widget 1", Size= (2, 2) },
            new CustomDashboardItem() { Position = (2, 0), SortIndex = 2, Name= "Widget 2" },
            new CustomDashboardItem() { Position = (0, 2), SortIndex = 3, Name= "Widget 3" },
            new CustomDashboardItem() { Position = (1, 2), SortIndex = 4, Name= "Widget 4" },
            new CustomDashboardItem() { Position = (2, 2), SortIndex = 5, Name= "Widget 5" },
            new CustomDashboardItem() { Position = (3, 2), SortIndex = 6, Name= "Widget 6" },
        },
        MaxX = 5,
        MaxY = 5,
        IsEditing = false
    };

    private string GetGridAreaName(string name)
    {
        return name.ToLower().Replace(" ", "");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateGridTemplateAreas();
        }
    }

    private async Task UpdateGridTemplateAreas()
    {
        var style = GenerateGridStyles();
        await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('gridContainer').setAttribute('style', '{style}');");
    }

    private string GenerateGridStyles()
    {
        var areas = new string[Instance.MaxY, Instance.MaxX];

        // Initialize grid areas with empty cells represented by "."
        for (int y = 0; y < Instance.MaxY; y++)
        {
            for (int x = 0; x < Instance.MaxX; x++)
            {
                areas[y, x] = ".";
            }
        }

        // Place items in their respective positions in grid areas
        foreach (var item in Instance.Items)
        {
            for (int y = 0; y < item.Size.Y; y++)
            {
                for (int x = 0; x < item.Size.X; x++)
                {
                    areas[item.Position.Y + y, item.Position.X + x] = GetGridAreaName(item.Name);
                }
            }
        }

        // Build the grid template areas string
        var templateRows = new List<string>();
        for (int y = 0; y < Instance.MaxY; y++)
        {
            var row = "";
            for (int x = 0; x < Instance.MaxX; x++)
            {
                row += areas[y, x];
                if (x < Instance.MaxX - 1) row += " ";
            }
            templateRows.Add($"'{row}'");
        }

        var templateAreas = string.Join(" ", templateRows);
        Console.WriteLine($"display: grid; gap: 5px; grid-template-columns: repeat({Instance.MaxX}, 1fr); grid-template-areas: {templateAreas};");
        return $"display: grid; gap: 5px; grid-template-columns: repeat({Instance.MaxX}, 1fr); grid-template-areas: {templateAreas};";
    }

    private void SwapItems(int index1, int index2)
    {
        CustomDashboardItem item1 = Instance.Items[index1];
        CustomDashboardItem item2 = Instance.Items[index2];

        (int X, int Y) tempPosition = item1.Position;
        int tempSortIndex = item1.SortIndex;
        item1.Position = item2.Position;
        item2.Position = tempPosition;
        item1.SortIndex = item2.SortIndex;
        item2.SortIndex = tempSortIndex;

        StateHasChanged();
        UpdateGridTemplateAreas(); // Update grid style after swapping items
    }

    private int? SelectedIndex { get; set; }

    private void ResetSelectedIndex()
    {
        SelectedIndex = null;
    }

    private void ClickItem(CustomDashboardItem item)
    {
        if (SelectedIndex.HasValue)
        {
            SwapItems(SelectedIndex.Value, Instance.Items.IndexOf(item));
            ResetSelectedIndex();
        }
        else
        {
            SelectedIndex = Instance.Items.IndexOf(item);
        }
    }

    private void ToggleEditing()
    {
        Instance.IsEditing = !Instance.IsEditing;
    }
}
