@page "/timeline"
@rendermode InteractiveServer
@using DevExpress.Blazor
@inject IJSRuntime JS
@using System.Globalization

<h3>Interactive Timeline with Playback</h3>

<DxChart Data="@VisibleData" T="DataPoint" @ref="chart">
    <DxChartLineSeries T="DataPoint" TArgument="DateTime" TValue="int" Name="Series 1"
        ArgumentField="@(data => data.Time)" ValueField="@(data => data.Value)">
    </DxChartLineSeries>
</DxChart>

<TimelineControls CurrentSliderTicks="@CurrentSliderTicks" MinTicks="@MinTicks" MaxTicks="@MaxTicks"
    SliderDates="@SliderPoints" OnSeek="OnSeek" TogglePlayPause="TogglePlayPause" Stop="Stop"
    PlayPauseIcon="@PlayPauseIcon" />

@code {
    private DxChart<DataPoint> chart;
    private List<DataPoint> ChartData = new List<DataPoint>();
    private List<DateTime> SliderPoints = new List<DateTime>();
    private int CurrentSliderIndex = 0;
    private bool _isPlaying = false;
    private System.Timers.Timer _timer;

    public long CurrentSliderTicks => SliderPoints[CurrentSliderIndex].Ticks;
    public long MinTicks => SliderPoints.First().Ticks;
    public long MaxTicks => SliderPoints.Last().Ticks;

    private List<DataPoint> VisibleData => ChartData
    .Where(dp => dp.Time >= SliderPoints[CurrentSliderIndex]
    && dp.Time < SliderPoints[CurrentSliderIndex].AddMinutes(5))
    .ToList();

    protected override void OnInitialized()
    {
        GenerateChartData();
        InitializeTimer();
    }

    private void GenerateChartData()
    {
        Random random = new Random();
        DateTime startTime = DateTime.Now.AddHours(-10);

        for (int i = 0; i < 10; i++) // Generate data for 10 hours
        {
            for (int j = 0; j < 60; j += 5) // Data points every 5 minutes
            {
                DateTime pointTime = startTime.AddHours(i).AddMinutes(j);
                ChartData.Add(new DataPoint { Time = pointTime, Value = random.Next(0, 100) });
                SliderPoints.Add(pointTime);
            }
        }
    }

    private void InitializeTimer()
    {
        _timer = new System.Timers.Timer(1000); // Timer interval 1 second
        _timer.Elapsed += UpdateChart;
    }

    private void TogglePlayPause()
    {
        if (_isPlaying)
        {
            Pause();
        }
        else
        {
            Play();
        }
    }

    private void Play()
    {
        _isPlaying = true;
        _timer.Start();
        UpdatePlayPauseIcon();
    }

    private void Pause()
    {
        _isPlaying = false;
        _timer.Stop();
        UpdatePlayPauseIcon();
    }

    private void Stop()
    {
        _isPlaying = false;
        _timer.Stop();
        CurrentSliderIndex = 0;
        UpdateSlider();
        UpdatePlayPauseIcon();
    }

    private void UpdateChart(object sender, System.Timers.ElapsedEventArgs e)
    {
        if (_isPlaying)
        {
            InvokeAsync(() =>
            {
                if (CurrentSliderIndex < SliderPoints.Count - 1)
                {
                    CurrentSliderIndex++;
                }
                else
                {
                    _isPlaying = false;
                    _timer.Stop();
                }

                UpdateSlider();
                StateHasChanged(); // Ensure UI updates
            });
        }
    }

    private async Task OnSeek(long selectedTicks)
    {
        var closestDate = SliderPoints.OrderBy(d => Math.Abs(d.Ticks - selectedTicks)).FirstOrDefault();
        CurrentSliderIndex = SliderPoints.IndexOf(closestDate);
        UpdateSlider();
        await Task.CompletedTask;
    }

    private void UpdateSlider()
    {
        var newData = VisibleData;
        chart.Data = newData;
    }

    private string PlayPauseIcon => _isPlaying ? "bi-pause" : "bi-play";

    private void UpdatePlayPauseIcon()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    public class DataPoint
    {
        public DateTime Time { get; set; }
        public int Value { get; set; }
    }
}
