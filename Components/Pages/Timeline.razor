@page "/timeline"
@rendermode InteractiveServer
@using DevExpress.Blazor
@inject IJSRuntime JS
@using System.Globalization

<h3>Interactive Timeline with Playback</h3>

<DxChart Data="@VisibleData" T="DataPoint" @ref="chart">
    <DxChartLineSeries T="DataPoint" TArgument="DateTime" TValue="int" Name="Series 1"
        ArgumentField="@(data => data.Time)" ValueField="@(data => data.Value)">
    </DxChartLineSeries>
</DxChart>

<div class="controls">
    <button class="btn btn-primary" @onclick="TogglePlayPause">
        <i class="bi @PlayPauseIcon"></i>
    </button>
    <button class="btn btn-danger" @onclick="Stop">
        <i class="bi bi-stop"></i>
    </button>
    <div class="slider-container">
        <input type="range" min="0" max="@MaxSliderPoints" value="@CurrentSliderIndex" @oninput="@(e => Seek(e))"
            class="timeline-slider" />
        <div class="slider-label" style="left: @((CurrentSliderIndex / (double)MaxSliderPoints) * 100)%">
            @SliderDate.ToString("g", CultureInfo.InvariantCulture)
        </div>
    </div>
</div>

@code {
    private DxChart<DataPoint> chart;
    private List<DataPoint> ChartData = new List<DataPoint>();
    private int MaxSliderPoints => SliderPoints.Count - 1;
    private int CurrentSliderIndex = 0;
    private System.Timers.Timer _timer;
    private bool _isPlaying = false;

    private List<DateTime> SliderPoints = new List<DateTime>();
    private List<DataPoint> VisibleData => ChartData.Where(dp => dp.Time >= SliderDate && dp.Time <
    SliderDate.AddHours(1)).ToList();
    private DateTime SliderDate => SliderPoints[Math.Min(CurrentSliderIndex, SliderPoints.Count - 1)];

    protected override void OnInitialized()
    {
        // Initialize chart data with detailed 5-minute data points
        Random random = new Random();
        DateTime startTime = DateTime.Now.AddHours(-10);
        for (int i = 0; i < 10; i++) // Generate data for 10 hours
        {
            for (int j = 0; j < 60; j += 5) // Data points every 5 minutes
            {
                ChartData.Add(new DataPoint { Time = startTime.AddHours(i).AddMinutes(j), Value = random.Next(0, 100) });
            }
        }

        // Initialize slider points with hourly intervals
        for (int i = 0; i < 10; i++) // Slider points for 10 hours
        {
            SliderPoints.Add(startTime.AddHours(i));
        }

        // Initialize timer
        _timer = new System.Timers.Timer(1000); // Update every second
        _timer.Elapsed += UpdateChart;
    }

    private void TogglePlayPause()
    {
        if (_isPlaying)
        {
            Pause();
        }
        else
        {
            Play();
        }
    }

    private void Play()
    {
        _isPlaying = true;
        _timer.Start();
        UpdatePlayPauseIcon();
    }

    private void Pause()
    {
        _isPlaying = false;
        _timer.Stop();
        UpdatePlayPauseIcon();
    }

    private void Stop()
    {
        _isPlaying = false;
        _timer.Stop();
        // Reset chart and slider
        CurrentSliderIndex = 0;
        UpdateSlider();
        UpdatePlayPauseIcon();
    }

    private void UpdateChart(object sender, System.Timers.ElapsedEventArgs e)
    {
        if (_isPlaying)
        {
            InvokeAsync(() =>
            {
                if (CurrentSliderIndex < MaxSliderPoints)
                {
                    CurrentSliderIndex++;
                }
                else
                {
                    _isPlaying = false;
                    _timer.Stop();
                }

                // Ensure the slider and chart update correctly
                UpdateSlider();
                StateHasChanged();
            });
        }
    }

    private void Seek(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int index))
        {
            CurrentSliderIndex = index;
            UpdateSlider();
            StateHasChanged();
        }
    }

    private void UpdateSlider()
    {
        // Update the chart to reflect the current data point
        var newData = VisibleData;
        chart.Data = newData;
    }

    private string PlayPauseIcon => _isPlaying ? "bi-pause" : "bi-play";

    private void UpdatePlayPauseIcon()
    {
        // Trigger UI update for play/pause icon
        StateHasChanged();
    }

    public void Dispose()
    {
        _timer.Dispose();
    }

    public class DataPoint
    {
        public DateTime Time { get; set; }
        public int Value { get; set; }
    }
}

<style>
    .controls {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-top: 20px;
    }

    .btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
    }

    .slider-container {
        position: relative;
        flex-grow: 1;
        margin: 0 15px;
    }

    .timeline-slider {
        width: 100%;
    }

    .slider-label {
        position: absolute;
        top: -30px;
        background: #fff;
        border: 1px solid #ddd;
        padding: 2px 5px;
        font-size: 12px;
        color: #333;
        white-space: nowrap;
        transform: translateX(-50%);
        pointer-events: none;
    }
</style>

<!-- Include Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
