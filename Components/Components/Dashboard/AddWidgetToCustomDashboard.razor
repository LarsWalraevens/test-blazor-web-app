@namespace CustomDashboard.Components

@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components
@using System.Collections.ObjectModel
@inject IJSRuntime JSRuntime

<div @onclick="@ToggleModal" id="custom-dashboard-add-widget" class="d-flex justify-content-center align-items-center"
    style="width: 100%; height: 100%;">
    <span class="bi bi-plus" style="font-size: 3rem"></span>
</div>

@if (ShowModal && ToAddItem != null)
{
    <div class="modal d-block" id="exampleModal" aria-hidden="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Adding new widget</h5>
                    <button @onclick="ToggleModal" type="button" class="btn-close" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@ToAddItem" OnValidSubmit="@OnSubmitNewItem">
                        <DataAnnotationsValidator />
                        <div>
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" @bind-Value="@ToAddItem.Name" />
                            <ValidationMessage For="@(() => ToAddItem.Name)" />
                            <div class="mb-3">
                                <input type="radio" name="size" id="size-1x1" value="(1, 1)" checked
                                    @onclick="e => ToAddItem.Size = (1, 1)" />
                                <label for="size-1x1">1x1</label>
                            </div>
                            <div class="mb-3">
                                <input type="radio" name="size" id="size-2x2" value="(2, 2)"
                                    @onclick="e => ToAddItem.Size = (2, 2)" />
                                <label for="size-2x2">2x2</label>
                            </div>
                            <div class="mb-3">
                                <input type="radio" name="size" id="size-3x3" value="(3, 3)"
                                    @onclick="e => ToAddItem.Size = (3, 3)" />
                                <label for="size-3x3">3x3</label>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public CustomDashboardInstance Instance { get; set; }

    [Parameter]
    public CustomDashboardItem Item { get; set; }

    [Parameter]
    public EventCallback OnSuccess { get; set; }

    private CustomDashboardItem ToAddItem { get; set; }

    private bool ShowModal { get; set; }

    protected override void OnParametersSet()
    {
        ToAddItem = new CustomDashboardItem
            {
                Id = Item.Id,
                Name = Item.Name,
                IsAvailable = Item.IsAvailable,
                Position = Item.Position,
                Size = Item.Size
            };
    }

    private async Task ToggleModal()
    {
        ShowModal = !ShowModal;
    }

    private async Task OnSubmitNewItem()
    {
        try
        {
            int index = Instance.Items.IndexOf(Item);
            if (index >= 0)
            {
                // Check for overlap before making changes
                if (CheckOverlap(ToAddItem))
                {
                    // Throw an error and show a browser alert
                    throw new InvalidOperationException("Cannot add item. It overlaps with existing items.");
                }

                ToAddItem.IsAvailable = false;
                List<CustomDashboardItem> itemsToRemove = new List<CustomDashboardItem>();

                // Remove overlapping items
                if (ToAddItem.Size.X > 1 || ToAddItem.Size.Y > 1)
                {
                    for (int x = ToAddItem.Position.X; x < ToAddItem.Position.X + ToAddItem.Size.X; x++)
                    {
                        for (int y = ToAddItem.Position.Y; y < ToAddItem.Position.Y + ToAddItem.Size.Y; y++)
                        {
                            CustomDashboardItem itemToRemove =
                            Instance.Items.FirstOrDefault(i =>
                            i.Position.X == x &&
                            i.Position.Y == y &&
                            i.Id != ToAddItem.Id);

                            if (itemToRemove != null)
                            {
                                itemsToRemove.Add(itemToRemove);
                            }
                        }
                    }
                }

                foreach (var item in itemsToRemove)
                {
                    Instance.Items.Remove(item);
                }

                Instance.Items[index] = ToAddItem;

                await InvokeAsync(StateHasChanged);
                await ToggleModal();
                await OnSuccess.InvokeAsync();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("OnSubmitNewItem: " + e);
            // Show browser alert for the exception message
            await JSRuntime.InvokeVoidAsync("alert", e.Message);
        }
    }

    private bool CheckOverlap(CustomDashboardItem newItem)
    {
        // Determine the end positions for the new item
        int endX = newItem.Position.Item1 + newItem.Size.Item1 - 1;
        int endY = newItem.Position.Item2 + newItem.Size.Item2 - 1;

        // Check if any of the positions required by the new item are not available
        for (int x = newItem.Position.Item1; x <= endX; x++)
        {
            for (int y = newItem.Position.Item2; y <= endY; y++)
            {
                var overlappingItem = Instance.Items.FirstOrDefault(
                i => i.Position.Item1 <= x && x <= i.Position.Item1 + i.Size.Item1 - 1 &&
                i.Position.Item2 <= y && y <= i.Position.Item2 + i.Size.Item2 - 1 &&
                !i.IsAvailable);

                if (overlappingItem != null)
                {
                    return true; // Overlap detected
                }
            }
        }

        return false; // No overlap detected
    }

}
