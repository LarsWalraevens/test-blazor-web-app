@namespace CustomDashboard.Components

@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components
@using System.Collections.ObjectModel
@inject IJSRuntime JSRuntime

<div @onclick="@ToggleModal" id="custom-dashboard-add-widget" class="d-flex justify-content-center align-items-center"
    style="width: 100%; height: 100%;">
    <span class="bi bi-plus" style="font-size: 3rem"></span>
</div>

@if (ShowModal && ToAddItem != null)
{
    <div class="modal d-block" id="exampleModal" aria-hidden="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Adding new widget</h5>
                    <button @onclick="ToggleModal" type="button" class="btn-close" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@ToAddItem" OnValidSubmit="@OnSubmitNewItem" style="width: 85%"
                        class="mx-auto mb-4 mt-2">
                        <DataAnnotationsValidator />
                        <div class="d-flex gap-3 flex-column">
                            <div>
                                <label for="name" class="form-label d-block">Name</label>
                                <InputText autofocus class="w-100" id="name" @bind-Value="@ToAddItem.Name" required />
                            </div>
                            <div>
                                <p class="mb-2">
                                    Size (X, Y)
                                    <span data-bs-toggle="tooltip" data-bs-placement="top"
                                        title="How many cells in the grid this widget will take up">
                                        <i class="bi bi-info-circle px-1" data-bs-toggle="tooltip" data-bs-placement="top"
                                            data-bs-trigger="hover" data-bs-container="body"
                                            data-bs-delay="{ 'show': 50, 'hide': 100}"></i>
                                    </span>
                                </p>
                                <div class="d-grid gap-1 flex-column" style="grid-template-columns: repeat(3, 1fr);">
                                    <div>
                                        <input type="radio" name="size" id="size-1x1" value="(1, 1)"
                                            @onclick="@(() => ChangeFocusSize(1, 1))"
                                            checked="@((ToAddItem.Size.X == 1 && ToAddItem.Size.Y == 1))" />
                                        <label for="size-1x1">1x1</label>
                                    </div>
                                    <div>
                                        <input type="radio" name="size" id="size-1x2" value="(1, 2)"
                                            @onclick="@(() => ChangeFocusSize(1, 2))"
                                            checked="@((ToAddItem.Size.X == 1 && ToAddItem.Size.Y == 2))" />
                                        <label for="size-1x2">1x2</label>
                                    </div>
                                    <div>
                                        <input type="radio" name="size" id="size-2x2" value="(2, 2)"
                                            @onclick="@(() => ChangeFocusSize(2, 2))"
                                            checked="@((ToAddItem.Size.X == 2 && ToAddItem.Size.Y == 2))" />
                                        <label for="size-2x2">2x2</label>
                                    </div>
                                    <div>
                                        <input type="radio" name="size" id="size-3x3" value="(3, 3)"
                                            @onclick="@(() => ChangeFocusSize(3, 3))"
                                            checked="@((ToAddItem.Size.X == 3 && ToAddItem.Size.Y == 3))" />
                                        <label for="size-3x3">3x3</label>
                                    </div>
                                    <div>
                                        <input type="radio" name="size" id="size-2x3" value="(2, 3)"
                                            @onclick="@(() => ChangeFocusSize(2, 3))"
                                            checked="@((ToAddItem.Size.X == 2 && ToAddItem.Size.Y == 3))" />
                                        <label for="size-2x3">2x3</label>
                                    </div>
                                    <div>
                                        <input type="radio" name="size" id="size-4x4" value="(4, 4)"
                                            @onclick="@(() => ChangeFocusSize(4, 4))"
                                            checked="@((ToAddItem.Size.X == 4 && ToAddItem.Size.Y == 4))" />
                                        <label for="size-4x4">4x4</label>
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Submit</button>
                            <pre>@JsonConvert.SerializeObject(ToAddItem, Formatting.Indented)</pre>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public CustomDashboardInstance Instance { get; set; }

    [Parameter]
    public CustomDashboardItem Item { get; set; }

    [Parameter]
    public EventCallback OnSuccess { get; set; }
    [Parameter]
    public EventCallback ResetFocus { get; set; }
    [Parameter]
    public EventCallback SetFocus { get; set; }
    [Parameter]
    public Func<CustomDashboardItem[], Task> SetFocusGridItems { get; set; }

    private CustomDashboardItem ToAddItem { get; set; }
    private bool ShowModal { get; set; }

    protected override void OnParametersSet()
    {
        ToAddItem = new CustomDashboardItem
            {
                Id = Item.Id,
                Name = Item.Name,
                IsAvailable = Item.IsAvailable,
                Position = Item.Position,
                Size = Item.Size
            };
    }

    private async Task ChangeFocusSize(int x, int y)
    {

        ToAddItem.Size = (x, y);

        List<CustomDashboardItem> focusItems = new List<CustomDashboardItem> { Item };

        // Calculate all positions based on the size and add to focusItems
        for (int i = Item.Position.X; i < Item.Position.X + x; i++)
        {
            for (int j = Item.Position.Y; j < Item.Position.Y + y; j++)
            {
                if (i == Item.Position.X && j == Item.Position.Y) continue; // Skip the main item

                CustomDashboardItem gridItem = Instance.Items.FirstOrDefault(item => item.Position.X == i && item.Position.Y == j &&
                item.IsAvailable);
                if (gridItem != null)
                {
                    focusItems.Add(gridItem);
                }
            }
        }

        await SetFocusGridItems(focusItems.ToArray());
    }

    private async Task ToggleModal()
    {
        bool newValue = !ShowModal;

        ShowModal = newValue;
        if (newValue == false)
        {
            await ResetFocus.InvokeAsync();
        }
        else
        {
            await SetFocus.InvokeAsync();
        }
    }    

    private async Task OnSubmitNewItem()
    {
        try
        {
            // Check if new item exceeds the maxX or maxY value
            if ((ToAddItem.Position.X + ToAddItem.Size.X > Instance.MaxX) || (ToAddItem.Position.Y + ToAddItem.Size.Y >
            Instance.MaxY))
            {
                throw new InvalidOperationException("Cannot add item. It exceeds the maximum allowed dimensions.");
            }

            // Check for overlap before making changes
            if (CheckOverlap(ToAddItem))
            {
                throw new InvalidOperationException("Cannot add item. It overlaps with existing items.");
            }

            ToAddItem.IsAvailable = false;
            List<CustomDashboardItem> itemsToRemove = new List<CustomDashboardItem>();

            // Remove overlapping items
            if (ToAddItem.Size.X > 1 || ToAddItem.Size.Y > 1)
            {
                for (int x = ToAddItem.Position.X; x < ToAddItem.Position.X + ToAddItem.Size.X; x++)
                {
                    for (int y = ToAddItem.Position.Y; y < ToAddItem.Position.Y + ToAddItem.Size.Y; y++)
                    {
                        CustomDashboardItem itemToRemove = Instance.Items.FirstOrDefault(i =>
                        i.Position.X == x && i.Position.Y == y && i.Id != ToAddItem.Id);

                        if (itemToRemove != null)
                        {
                            itemsToRemove.Add(itemToRemove);
                        }
                    }
                }
            }

            foreach (var item in itemsToRemove)
            {
                Instance.Items.Remove(item);
            }

            // Add the new item if it's not found in the list
            if (Instance.Items.IndexOf(Item) < 0)
            {
                Instance.Items.Add(ToAddItem);
            }
            else
            {
                int index = Instance.Items.IndexOf(Item);
                Instance.Items[index] = ToAddItem;
            }

            await InvokeAsync(StateHasChanged);
            await ToggleModal();
            await OnSuccess.InvokeAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine("OnSubmitNewItem: " + e);
            // Show browser alert for the exception message
            await JSRuntime.InvokeVoidAsync("alert", e.Message);
        }
    }

    private bool CheckOverlap(CustomDashboardItem newItem)
    {
        // Determine the end positions for the new item
        int endX = newItem.Position.X + newItem.Size.X - 1;
        int endY = newItem.Position.Y + newItem.Size.Y - 1;

        // Check if any of the positions required by the new item are not available
        for (int x = newItem.Position.X; x <= endX; x++)
        {
            for (int y = newItem.Position.Y; y <= endY; y++)
            {
                var overlappingItem = Instance.Items.FirstOrDefault(i =>
                i.Position.X <= x && x <= i.Position.X + i.Size.X - 1 &&
                i.Position.Y <= y && y <= i.Position.Y + i.Size.Y - 1 && !i.IsAvailable);

                if (overlappingItem != null)
                {
                    return true; // Overlap detected
                }
            }
        }

        return false; // No overlap detected
    }
}
