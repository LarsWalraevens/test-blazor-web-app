@namespace test_blazor_web_app.Components

@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components
@using Widget.Forecast
@using System.Collections.ObjectModel
@inject IJSRuntime JSRuntime

<WidgetForecastMap DiameterInPx="DiameterInPx" DegreePositioning="DegreePositioning">
    @foreach (List<WidgetForecastItem> group in ForecastGroupedItems)
    {
        var mainItem = group.FirstOrDefault();
        if (mainItem != null)
        {
            <WidgetForecastWaypoint FocusedForecastItemModal="FocusedForecastItemModal"
                SetFocusedForecastItem="(item) => SetFocusedForecastItem(item)" IsVessel="@(mainItem.Type.Name == "Speed")"
                TargetDotSizeInPx="@TargetDotSizeInPx" Item="@mainItem" Options="@(group.Skip(1).ToList())"
                ForecastGroupedItems="@ForecastGroupedItems" SetForecastGroupedItems="SetForecastGroupedItems" />
        }
    }
    @foreach (List<WidgetForecastItem> group in ForecastGroupedItems)
    {
        foreach (WidgetForecastItem item in group)
        {
            if (item.Type.Name == "Speed")
            {
                <WidgetForecastVessel Degrees="@item.Degrees" IsActual="@item.IsActual" />
            }

        }
    }
</WidgetForecastMap>
@if (FocusedForecastItem != null)
{
    <div>

    </div>

}

@code {
    [Parameter]
    public List<WidgetForecastItem> ForecastItems { get; set; }

    [Parameter]
    public int TargetDotSizeInPx { get; set; }

    [Parameter]
    public int DiameterInPx { get; set; }

    [Parameter]
    public decimal? DegreePositioning { get; set; }

    // Focused type
    public record FocusedForecastItemModal(WidgetForecastItem Main, List<WidgetForecastItem> Others);

    // Focused state for tooltip
    public FocusedForecastItemModal FocusedForecastItem { get; set; }

    public List<List<WidgetForecastItem>> ForecastGroupedItems { get; set; }

    public async Task SetForecastGroupedItems(List<List<WidgetForecastItem>> items)
    {
        ForecastGroupedItems = items;
        await InvokeAsync(StateHasChanged);
    }

    // Set focused state
    private async Task SetFocusedForecastItem(FocusedForecastItemModal item)
    {
        FocusedForecastItem = item;
        await InvokeAsync(StateHasChanged);
    }

    // Loop through items to group if degree value is in the same margin
    protected override void OnInitialized()
    {
        ForecastGroupedItems = new List<List<WidgetForecastItem>>();
        List<WidgetForecastItem> currentGroup = new List<WidgetForecastItem>();
        decimal margin = (decimal)DiameterInPx / 2.8M * (decimal)TargetDotSizeInPx / (decimal)DiameterInPx;

        // Order items by Degrees with wrap-around logic
        var myItems = ForecastItems.OrderBy(x => x.Degrees < margin ? x.Degrees + 360 : x.Degrees)
        .ThenBy(x => x.Type.Name != "Speed")
        .ToList();

        foreach (var item in myItems)
        {
            if (currentGroup.Count == 0 || IsWithinMargin(currentGroup.Last().Degrees, item.Degrees, margin))
            {
                currentGroup.Add(item);
            }
            else
            {
                ForecastGroupedItems.Add(currentGroup);
                currentGroup = new List<WidgetForecastItem> { item };
            }
        }

        // Add the last group if it has items
        if (currentGroup.Any())
        {
            ForecastGroupedItems.Add(currentGroup);
        }

        // Ensure that each group is ordered with "Speed" items first
        for (int i = 0; i < ForecastGroupedItems.Count; i++)
        {
            ForecastGroupedItems[i] = ForecastGroupedItems[i].OrderBy(x => x.Type.Name != "Speed").ThenBy(x => x.Degrees).ToList();
        }

        // Ensure the group containing "Speed" items is at the top
        ForecastGroupedItems = ForecastGroupedItems.OrderByDescending(g => g.Any(item => item.Type.Name == "Speed"))
        .ThenBy(g => g.Min(item => item.Degrees))
        .ToList();
    }

    // Helper method to determine if two degrees are within the margin, considering wrapping
    private bool IsWithinMargin(decimal degree1, decimal degree2, decimal margin)
    {
        decimal difference = Math.Abs(degree1 - degree2);
        if (difference > 180)
        {
            difference = 360 - difference;
        }
        return difference <= margin;
    }

}


<style>
    .compass-map-target-dot-button {
        position: relative;
        cursor: help;
        z-index: 10;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button {
        border-radius: 100%;
        background: #1B87DF;
        box-shadow: inset 0px 0px 0px 2px rgba(1, 1, 1, 0.2);
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        gap: 4px;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-content {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        gap: 4px;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-content i {
        margin-top: -5px;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-indicators {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        gap: 2px;
        margin-top: -2px;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-indicators>span {
        border-radius: 100%;
        background-color: #175B93;
        box-shadow: inset 0px 0px 2px rgba(1, 1, 1, 0.8);
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-indicators>#planned.active {
        background-color: white !important;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-indicators>#actual.active {
        background-color: #1EFF00 !important;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button i {
        color: white;
    }

    .compass-map-target-dot-button-container {
        position: absolute;
        display: grid;
        justify-content: center;
        align-items: flex-start;
        justify-items: center;
        bottom: 50%;
        border-radius: 10%;
        z-index: 30;
    }

    .compass-map-vessel-waypoint {
        position: absolute;
        height: 50%;
        bottom: 50%;
        left: 50%;
        transform-origin: 0% 100%;
        border-radius: 10%;
        z-index: 1;
        width: 2px;
        background-color: unset;
        background-size: 2px 9px;
        background-repeat: repeat;
        background-image: linear-gradient(to top, #FFFFFF 60%, rgba(255, 255, 255, 0) 0%);
    }

    .compass-map-vessel-waypoint-actual {
        background-image: linear-gradient(to top, #1EFF00 60%, rgba(255, 255, 255, 0) 0%);
    }

    .compass-map-target-waypoint .arrow {
        content: "";
        position: absolute;
        left: -6px;
        width: 0;
        height: 0;
        border-left: 7px solid transparent;
        border-right: 7px solid transparent;
        border-top: 15px solid white;
    }

    .compass-map-target-waypoint-actual .arrow {
        border-top-color: #1EFF00 !important;
    }

    .compass-map-target-waypoint {
        position: absolute;
        height: 50%;
        bottom: 50%;
        left: 50%;
        transform-origin: 0% 100%;
        border-radius: 10%;
        z-index: 1;
        width: 2px;
        background-color: unset;
        background-repeat: repeat;
        background-size: cover;
    }

    .compass-map-dot-button-options {
        position: absolute;
        display: flex;
        justify-content: center;
        align-items: center;
        justify-items: center;
        top: -15%;
        left: 0;
        width: 50%;
        height: 50%;
        background-color: #175B93;
        box-shadow: inset 0px 0px 3px rgba(1, 1, 1, 1);
        border: none;
        border-radius: 100%;
    }

    .compass-map-dot-button-options:hover {
        background-color: #65BEF0;
    }

    .compass-map-target-dot-button:hover .compass-map-target-dot-button-tooltip {
        display: block;
    }

    .compass-map-target-dot-button-tooltip {
        background-color: white;
        z-index: 1000;
        min-width: 200px;
        position: absolute !important;
        top: 100%;
        padding: 0.5rem;
        box-shadow: 0 0 4px rgba(0, 0, 0, 0.25);
        border-radius: 0.2rem;
        display: none;
    }
</style>