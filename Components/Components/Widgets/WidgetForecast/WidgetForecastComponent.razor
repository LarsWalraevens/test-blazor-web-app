@namespace test_blazor_web_app.Components

@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components
@using Widget.Forecast
@using System.Collections.ObjectModel
@inject IJSRuntime JSRuntime

<WidgetForecastMap DiameterInPx="Instance.DiameterInPx" DegreePositioning="Instance.DegreePositioning">
    @foreach (List<WidgetForecastItem> group in ForecastGroupedItems)
    {
        WidgetForecastItem mainItem = group.FirstOrDefault();
        List<WidgetForecastItem> OtherOptions = group.Where(i => i.Type != mainItem.Type && i.IsActual !=
        mainItem.IsActual).ToList();
        @* List<WidgetForecastItem> SameTypeInOptions = new List<WidgetForecastItem>();
    if(Instance.FocusedItem != null)
    {
    SameTypeInOptions = Instance.FocusedItem.others.FindAll(x => x.Type.Name == mainItem.Type.Name).ToList();
    } *@

        if (mainItem != null)
        {
            <WidgetForecastWaypoint IsVessel="@(mainItem.Type.Name == "Speed")" Instance="@Instance" Item="@mainItem"
                Options="@(group.Skip(1).ToList())" ForecastGroupedItems="@ForecastGroupedItems"
                SetForecastGroupedItems="SetForecastGroupedItems" SetFocusedItem="SetFocusedItem" />
            @* @if(Instance.FocusedItem.main != null)
    {
    <div class="compass-map-target-dot-button-tooltip">
    <p class="fw-bold mb-1">@Instance.FocusedItem.main.Type.Name</p>
    <ul class="list-unstyle pl-4 @(Instance.FocusedItem.others.Count > 0 ? "mb-3" : "mb-1")">
    <li>@(Instance.FocusedItem.main.IsActual ? "Actual" : "Planned"): @Instance.FocusedItem.main.ValueText</li>
    @if(Instance.FocusedItem.others.FindAll(x => x.Type.Name == mainItem.Type.Name).Count > 0)
    {
    <li> has item </li>
    <li>@(Instance.FocusedItem.others.FirstOrDefault(x => x.Type.Name == mainItem.Type.Name).IsActual ? "Actual" :
    "Planned"): @Instance.FocusedItem.others.FirstOrDefault(x => x.Type.Name == mainItem.Type.Name).ValueText</li>
    }

    </ul>
    <pre>@JsonConvert.SerializeObject(Instance.FocusedItem, Formatting.Indented)</pre>
    @if (OtherOptions.Count > 0) {
    <p class="fw-bold mb-1">Other options</p>
    <ul class="list-unstyled mb-1">
    @{
    if (OtherOptions.Count >0 )
    {
    foreach (WidgetForecastItem MyOtherOption in OtherOptions.GroupBy(x => x.Type.Name).Select(x => x.First()))
    {
    <li style="cursor:pointer; text-decoration:underline;">@(MyOtherOption.Type.Name)</li>
    }
    }
    }
    </ul>
    }
    </div>
    } *@
        }
    }
    @foreach (List<WidgetForecastItem> group in ForecastGroupedItems)
    {
        foreach (WidgetForecastItem item in group)
        {
            if (item.Type.Name == "Speed")
            {
                <WidgetForecastVessel Degrees="@item.Degrees" IsActual="@item.IsActual" />
            }
        }
    }
</WidgetForecastMap>
@code {
    [Parameter] public WidgetForecastInstance Instance { get; set; }

    public List<List<WidgetForecastItem>> ForecastGroupedItems { get; set; }

    public async Task SetForecastGroupedItems(List<List<WidgetForecastItem>> items)
    {
        ForecastGroupedItems = items;
        await InvokeAsync(StateHasChanged);
    }

    public async Task SetFocusedItem((WidgetForecastItem, List<WidgetForecastItem>) item)
    {
        Instance.SetFocusedForecastItem(item);
        await InvokeAsync(StateHasChanged);
    }

    // Loop through items to group if degree value is in the same margin
    protected override void OnInitialized()
    {
        ForecastGroupedItems = new List<List<WidgetForecastItem>>();
        List<WidgetForecastItem> currentGroup = new List<WidgetForecastItem>();
        decimal margin = (decimal)Instance.DiameterInPx / 2.8M * (decimal)Instance.TargetDotSizeInPx /
        (decimal)Instance.DiameterInPx;

        // Order items by Degrees with wrap-around logic
        var myItems = Instance.Items.OrderBy(x => x.Degrees < margin ? x.Degrees + 360 : x.Degrees)
        .ThenBy(x => x.Type.Name != "Speed")
        .ToList();

        foreach (var item in myItems)
        {
            if (currentGroup.Count == 0 || IsWithinMargin(currentGroup.Last().Degrees, item.Degrees, margin))
            {
                currentGroup.Add(item);
            }
            else
            {
                ForecastGroupedItems.Add(currentGroup);
                currentGroup = new List<WidgetForecastItem> { item };
            }
        }

        // Add the last group if it has items
        if (currentGroup.Any())
        {
            ForecastGroupedItems.Add(currentGroup);
        }

        // Ensure that each group is ordered with "Speed" items first
        for (int i = 0; i < ForecastGroupedItems.Count; i++)
        {
            ForecastGroupedItems[i] = ForecastGroupedItems[i].OrderBy(x => x.Type.Name != "Speed").ThenBy(x => x.Degrees).ToList();
        }

        // Ensure the group containing "Speed" items is at the top
        ForecastGroupedItems = ForecastGroupedItems.OrderByDescending(g => g.Any(item => item.Type.Name == "Speed"))
        .ThenBy(g => g.Min(item => item.Degrees))
        .ToList();
    }

    // Helper method to determine if two degrees are within the margin, considering wrapping
    private bool IsWithinMargin(decimal degree1, decimal degree2, decimal margin)
    {
        decimal difference = Math.Abs(degree1 - degree2);
        if (difference > 180)
        {
            difference = 360 - difference;
        }
        return difference <= margin;
    }

}


<style>
    .compass-map-target-dot-button-container .compass-map-target-dot-button-wrapper {
        border-radius: 100%;
        background: #1B87DF;
        box-shadow: inset 0px 0px 0px 2px rgba(1, 1, 1, 0.2);
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        gap: 4px;
        position: relative;
        cursor: pointer;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-content {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        gap: 4px;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-content i {
        margin-top: -5px;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-indicators {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        gap: 2px;
        margin-top: -2px;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-indicators>span {
        border-radius: 100%;
        background-color: #175B93;
        box-shadow: inset 0px 0px 2px rgba(1, 1, 1, 0.8);
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-indicators>#planned.active {
        background-color: white !important;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button .compass-map-target-dot-button-indicators>#actual.active {
        background-color: #1EFF00 !important;
    }

    .compass-map-target-dot-button-container .compass-map-target-dot-button i {
        color: white;
    }

    .compass-map-target-dot-button-container {
        position: absolute;
        display: grid;
        justify-content: center;
        align-items: flex-start;
        justify-items: center;
        bottom: 50%;
        border-radius: 10%;
    }

    .compass-map-vessel-waypoint {
        position: absolute;
        height: 50%;
        bottom: 50%;
        left: 50%;
        transform-origin: 0% 100%;
        border-radius: 10%;
        z-index: 1;
        width: 2px;
        background-color: unset;
        background-size: 2px 9px;
        background-repeat: repeat;
        background-image: linear-gradient(to top, #FFFFFF 60%, rgba(255, 255, 255, 0) 0%);
    }

    .compass-map-vessel-waypoint-actual {
        background-image: linear-gradient(to top, #1EFF00 60%, rgba(255, 255, 255, 0) 0%);
    }

    .compass-map-target-waypoint .arrow {
        content: "";
        position: absolute;
        left: -6px;
        width: 0;
        height: 0;
        border-left: 7px solid transparent;
        border-right: 7px solid transparent;
        border-top: 15px solid white;
    }

    .compass-map-target-waypoint-actual .arrow {
        border-top-color: #1EFF00 !important;
    }

    .compass-map-target-waypoint {
        position: absolute;
        height: 50%;
        bottom: 50%;
        left: 50%;
        transform-origin: 0% 100%;
        border-radius: 10%;
        z-index: 1;
        width: 2px;
        background-color: unset;
        background-repeat: repeat;
        background-size: cover;
    }

    .compass-map-dot-button-options {
        position: absolute;
        display: flex;
        justify-content: center;
        align-items: center;
        justify-items: center;
        top: -15%;
        left: 0;
        width: 50%;
        height: 50%;
        max-width: 35px;
        max-height: 35px;
        background-color: #175B93;
        box-shadow: inset 0px 0px 3px rgba(1, 1, 1, 1);
        border: none;
        border-radius: 100%;
        z-index: 10;
    }

    .compass-map-dot-button-options:hover {
        background-color: #65BEF0;
    }

    .compass-map-target-dot-button:hover .compass-map-target-dot-button-tooltip {
        display: block !important;
        z-index: 1000 !important;
    }

    .compass-map-target-dot-button-tooltip {
        display: none;
        background-color: white;
        z-index: 1000 !important;
        width: 100%;
        min-width: 200px;
        position: absolute !important;
        top: 100%;
        padding: 0.5rem;
        box-shadow: 0 0 4px rgba(0, 0, 0, 0.25);
        border-radius: 0.2rem;
    }
</style>