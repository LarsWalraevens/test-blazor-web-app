@namespace test_blazor_web_app.Components

<div
    style="min-width: @SizeInPx; min-height: @SizeInPx; position: relative; display: flex; flex-direction:column; margin: 3rem;">
    @if (ChildContent != null)
    {
        <div style="width: 100%; min-height: 100%; position: absolute; flex-grow:1; display:flex;">
            @ChildContent
        </div>
    }
    <div class="compass-map @GenerateDepthClass()">
        <div class="compass-map-labels">
            <p id="north">n</p>
            <p id="west">w</p>
            <p id="east">e</p>
            <p id="south">s</p>
            <span id="y-axis" />
            <span id="x-axis" />
        </div>
        <div class="compass-map-inner">
        </div>
        <div class="compass-map-positioning">
            @if (DegreePositioning != null)
            {
                <div title="Compared position from what was planned"
                    style="cursor:help; transform: rotate(@(DegreePositioning)deg); transform-origin: 0% 50%;width: 1px;left:calc(50%);height: 100%;position: absolute; display:flex; justify-content: center; z-index: 10;">
                    <span
                        style="background-color:@(PositioningIsWarning != null && PositioningIsWarning== true ? "#f2ce41" : "#FFFFFF"); box-shadow: inset 0px 0px 0px 1px rgba(0, 0, 0, 40%); width: 13px; height: 13px; border-radius: 100%; display: block; position: absolute; opacity: 0.8;">
                    </span>
                </div>
            }
            @if (DegreeBearing != null)
            {
                <div title="Bearing of vessel" class="compass-map-target-waypoint compass-map-target-waypoint-actual "
                    style="cursor:help; transform: rotate(@(DegreeBearing)deg); width: 1px; position: absolute; height: 45%;bottom: 50%;left: 50%;transform-origin: 0% 100%; display:flex; justify-content: center; align-items: center;">
                    <span style="width: 100%; height: 100%; display: block; position: absolute; opacity: 0.8;"></span>
                    <span class="arrow"
                        style="top:-5px; transform:rotate(180deg); border-top: @(DiameterInPx/7)px solid var(--color-actual);" />
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int DiameterInPx { get; set; }

    [Parameter] public decimal? DegreePositioning { get; set; }
    [Parameter] public bool? PositioningIsWarning { get; set; }
    [Parameter] public decimal? DegreeBearing { get; set; }
    [Parameter] public decimal DepthValueInMeter { get; set; }

    private string GenerateDepthClass()
    {
        if (DepthValueInMeter > 200)
        {
            return "level-4";
        }
        else if (DepthValueInMeter >= 50 && DepthValueInMeter <= 200)
        {
            return "level-3";
        }
        else if (DepthValueInMeter >= 20 && DepthValueInMeter < 50)
        {
            return "level-2";
        }
        else
        {
            return "level-1";
        }
    }

    private string SizeInPx => $"{DiameterInPx}px";

    [Parameter] public RenderFragment ChildContent { get; set; }
}
