@using Microsoft.AspNetCore.Components
@namespace test_blazor_web_app.Components

<div class="gauge-container">
    <div class="gauge @(HasTemp == true ? "has-temp" : null)" style="width: @(SizeInPx)px; height: @(SizeInPx)px;">
        <div class="gauge-background"></div>

        @if (HasTemp == true)
        {
            <div class="gauge-temp" style="width: @(SizeInPx)px; height: @(SizeInPx)px;" />
        }

        @if (MinRange.HasValue && MaxRange.HasValue)
        {
            <div class="gauge-range-container" style="width: @(SizeInPx*1.05)px; height: @(SizeInPx*1.05)px;">
                <div class="gauge-range" style="
                        background: conic-gradient(from @RangeStartDegree, @(RangeColor) @RangeSweep, transparent 0);
                        transform: rotate(180deg);">
                </div>
            </div>
        }

        <div class="gauge__meter"
            style="transform: translate(0%, -100%) rotate(@NeedleDegree); height: @(SizeInPx * 0.35)px;"></div>

        <div class="gauge__ticks" style="top:calc(50% - @((SizeInPx * 0.35) / 7)px)">
            @foreach (var label in Labels)
            {
                <div class="gauge__tick"
                    style="transform: rotate(@label.Degree) translateY(-@((SizeInPx/2) - (SizeInPx * 0.05))px); height: @(SizeInPx * 0.05)px;">
                    @label.Value</div>
            }
        </div>

        <div class="gauge__subticks" style="top: calc(50% - @((SizeInPx * 0.03))px);">
            @foreach (var subTick in SubTicks)
            {
                <div class="gauge__subtick"
                    style="transform: rotate(@subTick.Degree) translateY(-@((SizeInPx/2) - (SizeInPx * 0.03))px); height: @(SizeInPx * 0.03)px;">
                </div>
            }
        </div>

        <div class="gauge__info" style="max-width: @(SizeInPx/4)px;">
            <div class="gauge__value" style="font-size: @(SizeInPx * 0.09)px; bottom: 15%;">
                @Value @UnitLabel
            </div>
            <div style="font-size: @(SizeInPx * 0.05)px; top: 35%; opacity: 0.7; font-style: italic;">
                @LabelText
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int MaxValue { get; set; }
    [Parameter] public int MinValue { get; set; }
    [Parameter] public int SizeInPx { get; set; } = 300;
    [Parameter] public decimal Value { get; set; } = 0;
    [Parameter] public string UnitLabel { get; set; }
    [Parameter] public bool? HasTemp { get; set; }
    [Parameter] public string LabelText { get; set; }
    [Parameter] public int? MinRange { get; set; }
    [Parameter] public int? MaxRange { get; set; }
    [Parameter] public string? RangeColor { get; set; } = "#00ff00";

    private string NeedleDegree => $"{-135 + ((Value - MinValue) * 270 / (MaxValue - MinValue))}deg";  
    private string RangeStartDegree => $"{45 + ((MinRange.GetValueOrDefault(MinValue) - MinValue) * 270 / (MaxValue - MinValue))}deg";    private string RangeSweep => $"{((MaxRange.GetValueOrDefault(MaxValue) - MinRange.GetValueOrDefault(MinValue)) * 270 / (MaxValue - MinValue))}deg";
    private string RangeRotation => $"{-135}deg";

    private List<GaugeLabel> Labels { get; set; }
    private List<GaugeSubTick> SubTicks { get; set; }

protected override void OnInitialized()
{
    // Number of main labels on the gauge
    int MaxLabelsAmount = 13;
    
    // Create the labels evenly distributed across the gauge
    Labels = Enumerable.Range(0, MaxLabelsAmount)
        .Select(i => new GaugeLabel
        {
            // Calculate the value for each label
            Value = (MinValue + i * (MaxValue - MinValue) / (MaxLabelsAmount - 1)).ToString(),
            // Calculate the rotation degree for each label
            Degree = $"{-135 + (i * 270 / (MaxLabelsAmount - 1))}deg"
        })
        .ToList();

    SubTicks = new List<GaugeSubTick>();

    // Number of subticks between each label
    int subTicksPerSegment = 4;

    // Generate subticks between each pair of main labels
    for (int i = 0; i < MaxLabelsAmount - 1; i++)
    {
        int startValue = int.Parse(Labels[i].Value);
        int endValue = int.Parse(Labels[i + 1].Value);
        int segmentRange = endValue - startValue;

        for (int j = 1; j <= subTicksPerSegment; j++)
        {
            var subTickValue = startValue + (segmentRange * j / (subTicksPerSegment + 1));
            var degree = -135 + ((subTickValue - MinValue) * 270 / (MaxValue - MinValue));
            SubTicks.Add(new GaugeSubTick { Degree = $"{degree}deg" });
        }
    }

    if (MinValue > MaxValue)
    {
        throw new ArgumentException("MinValue cannot be greater than MaxValue");
    }
    if (MinRange != null && MaxRange != null)
    {
        if (MinRange < MinValue || MaxRange > MaxValue)
        {
            throw new ArgumentException("MinRange and MaxRange must be between MinValue and MaxValue");
        }
        if (MinRange > MaxRange)
        {
            throw new ArgumentException("MinRange cannot be greater than MaxRange");
        }
    }
}

    private class GaugeLabel
    {
        public string Value { get; set; }
        public string Degree { get; set; }
    }

    private class GaugeSubTick
    {
        public string Degree { get; set; }
    }
}
